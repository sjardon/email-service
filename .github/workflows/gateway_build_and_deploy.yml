name: Deploy gateway-service

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
env:
  REGISTRY: 'registry.digitalocean.com/email-services'
  IMAGE_NAME: 'gateway-service'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{github.event.inputs.version}} --build-arg PROJECT=$(echo $IMAGE_NAME) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{github.event.inputs.version}}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA,{{ secrets.POSTGRES_USER }},{{ secrets.POSTGRES_PASSWORD }},{{ secrets.POSTGRES_DB }},{{ secrets.POSTGRES_HOST }},{{ secrets.POSTGRES_PORT }}
          script: |
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            docker stop $(echo $IMAGE_NAME)
            docker rm $(echo $IMAGE_NAME)
            docker network create email-services
            docker run -d \
            --network email-services \
            -p 3000:3000 \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            --env PORT=3000 \
            --env REDIS_HOST_CONNECTION=redis \
            --env REDIS_PORT=6379 \
            --env REDIS_USERNAME=${{ secrets.POSTGRES_USER }} \
            --env REDIS_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{github.event.inputs.version}}
